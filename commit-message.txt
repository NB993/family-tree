refactor [by-ai] PM-023 예외 처리 표준화 - Response 객체 IllegalArgumentException → Objects.requireNonNull

- Response 객체와 도메인 내부 검증 로직의 예외 처리를 시스템 내부 버그(500)로 표준화
- 사용자 입력(400) vs 시스템 내부(500) 명확히 구분하여 HTTP 상태 코드 정확성 확보

## 구현된 주요 컴포넌트

### 프레젠테이션 계층
- FamilyMembersWithRelationshipsResponse: IllegalArgumentException → Objects.requireNonNull + IllegalStateException
- FamilyMemberWithRelationshipResponse: IllegalArgumentException → Objects.requireNonNull

### 도메인 계층
- FamilyTreeGeneration: level 음수 검증을 IllegalStateException으로 변경

### 애플리케이션 계층
- FindFamilyJoinRequestQuery: ID 양수 검증을 IllegalStateException으로 변경

### 특화 사항
- ProcessFamilyJoinRequestCommand: 비즈니스 룰 검증이므로 IllegalArgumentException 유지
- HTTP 상태 코드 정확성: 400(사용자 오류) vs 500(시스템 오류) 명확히 구분
- Objects.requireNonNull 활용으로 null 체크 표준화

## 테스트 구현
- FamilyMembersWithRelationshipsResponseTest: NullPointerException 검증으로 변경 ✅
- FamilyMemberWithRelationshipResponseTest: NullPointerException 검증으로 변경 ✅  
- FindFamilyJoinRequestQueryTest: IllegalStateException 검증으로 변경 ✅
- 전체 테스트 통과 확인 (BUILD SUCCESSFUL)

## 해결된 이슈
- Response 객체에서 잘못된 예외 타입 사용 문제 해결
- 계층별 예외 처리 표준 100% 준수로 일관성 확보
- 시스템 내부 생성 데이터의 올바른 예외 처리 적용
- HTTP 상태 코드와 예외 타입 매핑 정확성 향상

## 워크플로우 개선
- 예외 처리 표준화 기준 정립 및 적용
- 계층별 책임 분리 원칙 강화
- 개발자 실수 vs 사용자 오류 명확한 구분 기준 수립

## 다음 단계
- 추가 Command/Query 클래스 예외 처리 검토
- 전체 프로젝트 예외 처리 일관성 최종 점검
- 코딩 스탠다드 문서에 예외 처리 가이드라인 반영 검토
