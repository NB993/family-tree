feat [by-ai] FT-007 JWT 토큰 유틸리티 및 핵심 인프라 구현 완료

- OAuth2 + 세션 기반 인증에서 JWT 토큰 기반 Stateless 인증으로 확장
- 기존 FTUser 구조와 완벽 호환되는 JWT 토큰 생성/검증 시스템 구축

## 구현된 주요 컴포넌트

### JWT 설정 및 구성
- JwtProperties: JWT 설정을 관리하는 ConfigurationProperties 클래스
- application-local.yml: JWT 설정 추가 (secret, 만료시간, issuer)

### JWT 예외 처리
- InvalidTokenException: 유효하지 않은 토큰 예외 (401 Unauthorized)
- ExpiredTokenException: 만료된 토큰 예외 (401 Unauthorized)

### JWT 토큰 유틸리티
- JwtTokenUtil: JWT 토큰 생성, 검증, 파싱을 담당하는 핵심 유틸리티
  * Access Token 생성 (1시간 만료, 사용자 정보 포함)
  * Refresh Token 생성 (7일 만료, 사용자 ID만 포함)
  * 토큰 검증 및 Claims 추출 기능
  * HS256 알고리즘 사용, 256비트 이상 비밀 키 지원

### DTO 클래스
- JwtTokenResponse: JWT 토큰 응답용 Record 클래스 (OAuth2 표준 준수)

### 기술 스택 업데이트
- jjwt 라이브러리 0.11.5 추가 (HMAC-SHA256 서명 지원)

## 테스트 구현
- JwtTokenUtilTest: JWT 토큰 유틸리티 전체 기능 단위 테스트 (13개 테스트) ✅
- JwtTokenResponseTest: JWT 응답 DTO 테스트 (2개 테스트) ✅
- 전체 테스트 통과: 525개 테스트 모두 성공

## 보안 고려사항
- 256비트 이상 비밀 키: HMAC-SHA256 알고리즘에 적합한 키 길이
- Claims 정보: 사용자 ID, 이메일, 이름, 역할 정보 포함
- 토큰 만료 시간: Access Token 1시간, Refresh Token 7일
- 환경변수 지원: JWT_SECRET 환경변수로 운영환경 보안 강화

## 아키텍처 설계
- 기존 OAuth2 + FTUser 구조 완전 호환
- 세션 기반과 JWT 기반 인증 동시 지원 (점진적 전환 가능)
- Stateless 아키텍처 기반으로 서버 확장성 향상
- 프론트엔드 SPA 및 모바일 앱 지원 기반 마련

## 다음 단계
- FT-008: RefreshToken 엔티티 및 토큰 저장소 구현
- FT-009: JWT 인증 필터 및 Spring Security 통합
- FT-010: OAuth2 JWT 연동 및 토큰 발급 구현
