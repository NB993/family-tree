refactor [with-ai] FT-005 FindFamilyUseCase 표준화 리팩토링 - Query 패턴 적용 완료

- findById(Long) → find(FindFamilyByIdQuery)로 표준화
- findByNameContaining() → findAll()로 메서드명 표준화
- FindFamilyService에서 Objects.requireNonNull 패턴 적용 완료

## 구현된 주요 컴포넌트

### 애플리케이션 계층
- FindFamilyByIdQuery: 새로 추가된 Query 클래스 (생성자에서 IllegalArgumentException 검증)
- FindFamilyUseCase: 표준 패턴에 맞춰 find(Query)/findAll(Query) 메서드로 변경
- FindFamilyService: Objects.requireNonNull 패턴 적용 및 인터페이스 변경 적용

### 프레젠테이션 계층
- FindFamilyController: 새로운 Query 패턴 적용 및 UseCase 메서드 변경 적용

### 특화 사항
- 코어 계층 null 체크 표준화: Objects.requireNonNull 통일 적용
- UseCase 인터페이스 일관성: find(Query)/findAll(Query) 패턴 완성
- 계층별 책임 분리: 프레젠테이션(IllegalArgumentException) vs 코어(Objects.requireNonNull)

## 테스트 구현
- FindFamilyServiceTest: 새로운 메서드 시그니처에 맞춰 전체 리팩토링 ✅
- FindFamilyByIdQuery 생성자 검증 테스트 추가 ✅
- 전체 테스트 통과 확인 (BUILD SUCCESSFUL)

## 해결된 이슈
- UseCase 인터페이스 불일치 문제 해결 (원시 타입 vs Query 객체)
- 코어 계층 null 체크 표준화 완료 (if문 → Objects.requireNonNull)
- 메서드명 표준화 (findByNameContaining → findAll)

## 워크플로우 개선
- 인수인계서 v2.0 기반으로 체계적인 리팩토링 진행
- 단계별 진행으로 빌드 깨짐 없이 안전한 리팩토링 완료
- 티켓 번호 시스템을 통한 체계적 작업 관리

## 다음 단계
- 모든 UseCase 인터페이스 표준화 완료 상태
- 코어 계층 null 체크 표준화 100% 달성
- Family 홈 구성원 목록 조회 기능 본격 개발 준비 완료
