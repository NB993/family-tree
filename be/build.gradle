plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.asciidoctor.jvm.convert" version "3.3.2" //REST Docs
}

configurations {
    asciidoctorExtensions //REST Docs
}

group = 'io.jhchoe'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    //persistence
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.3'
    testImplementation 'io.rest-assured:rest-assured:5.5.1'
    testImplementation 'io.rest-assured:spring-mock-mvc:5.5.1'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

processResources.dependsOn('copyProperties')

tasks.register('copyProperties', Copy) {
    copy {
        from './properties'
        into './src/main/resources'
    }
}

// REST Docs ***
ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    doFirst {
        delete file("build/generated-snippets")
    }
    outputs.dir snippetsDir
}

// asciidoc 생성 작업에 대해서 정의한다
asciidoctor { // asciidoctor 태스크는
    dependsOn test // gradle test 작업이 끝난 이후에 실행된다.
    configurations 'asciidoctorExtensions' // asciidoctorExtensions 그룹의 의존성을 추가적으로 사용한다.
    inputs.dir snippetsDir // sciidoctor가 문서를 작성할 때 snippetsDir 경로에 있는 파일들을 입력으로 사용한다.

    // Asciidoctor 문서 빌드는 각종 "속성(attribute)"을 지원하는데, 여기서는 아래 두 가지 속성을 사용한다.
    attributes(
            'snippets': snippetsDir, // 테스트 실행 후 생성된 스니펫들의 경로에 대한 속성을 정의하여 asciidoc 내에서
            // snippetsDir 속성에 담긴 값을 사용해 스니펫 파일을 include하여 사용할 수 있다. ex include::{snippets}/...
            'source-highlighter': 'highlight.js' // 코드 블록을 하이라이팅하기 위해 highlight.js를 사용한다.
    )
}

tasks.register('copyApiDocs', Copy) {
    description = 'API 문서를 정적 리소스 디렉토리로 복사'
    group = 'Documentation'

    // 운영 환경에는 API 문서가 포함되지 않도록 제한(onlyIf는 task를 중단시키는 효력이 있다).
    def isProd = System.getProperty('spring.profiles.active')?.contains('prod') ?: false
    onlyIf { !isProd }

    from("${buildDir}/docs/asciidoc")
    into("src/main/resources/static/docs")

    // asciidoctor 태스크가 완료된 후 실행
    dependsOn asciidoctor
}

// build 태스크가 실행되기 전에 copyApiDocs 태스크가 먼저 실행되어야 함을 지정
tasks.named('build') {
    dependsOn copyApiDocs
}
