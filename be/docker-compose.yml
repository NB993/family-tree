# Docker Compose 버전 3.8 사용 - 최신 기능 지원 및 안정성 확보
version: '3.8'

services:
  mysql:
    # MySQL 8.0 공식 이미지 사용 - 최신 안정 버전으로 성능과 보안 개선
    image: mysql:8.0
    
    # 컨테이너명 지정 - 다른 프로젝트와 구분하고 관리 편의성 증대
    container_name: family-tree-mysql
    
    # 재시작 정책: unless-stopped - 수동으로 중지하지 않는 한 e항상 재시작
    # 개발 환경에서 Docker 재시작 시 자동으로 DB가 올라와야 하므로 설정
    restart: unless-stopped
    
    environment:
      # Root 계정 비밀번호 - 개발 환경용 간단한 비밀번호 사용
      MYSQL_ROOT_PASSWORD: rootpassword
      
      # 자동 생성할 데이터베이스명 - 프로젝트명과 일치시켜 명확성 확보
      MYSQL_DATABASE: family_tree
      
      # 애플리케이션 전용 사용자 생성 - 보안상 root 직접 사용 지양
      MYSQL_USER: family_tree_user
      MYSQL_PASSWORD: family_tree_password
      
      # Root 계정의 원격 접속 허용 - 개발 환경에서 외부 도구 접속 편의성
      MYSQL_ROOT_HOST: '%'
    
    ports:
      # 표준 MySQL 포트 매핑 - 기존 MySQL 클라이언트 도구와 호환성
      - "3306:3306"
    
    volumes:
      # 데이터 영속성 보장 - 컨테이너 재시작 시에도 데이터 보존
      - mysql_data:/var/lib/mysql
      
      # 초기화 스크립트 마운트 - 데이터베이스 초기 설정 자동화
      # 왼쪽: 호스트의 ./docker/mysql/init 디렉토리 와 오른쪽: 컨테이너 내부의 /docker-entrypoint-initdb.d 디렉토리를 볼륨 마운트 함.
      # MySQL 공식 이미지에서 /docker-entrypoint-initdb.d를 특수 목적으로 예약해두었고, 이미지 내부의 entrypoint 스크립트가 이 디렉토리를 감시해서 *.sql 등의 스크립트 파일이 존재하면 실행한다.
      # 단, DB가 완전히 비어있을 때만 실행하기 때문에 이미 초기화된 데이터가 있으면 이 작업을 건너뛴다.
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    
    # MySQL 8.0 기본 문자셋을 UTF8MB4로 설정 - 한글 및 이모지 완전 지원
    # utf8mb4_unicode_ci: 유니코드 정렬 규칙으로 다국어 검색/정렬 최적화
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    
    networks:
      # 서비스간 통신을 위한 전용 네트워크 사용
      - family-tree-network

# 볼륨 정의: 데이터 영속성을 위한 Docker 관리 볼륨
volumes:
  mysql_data:
    # 로컬 드라이버 사용 - 호스트 파일시스템에 데이터 저장
    # 성능이 좋고 백업이 용이함
    driver: local

# 네트워크 정의: 서비스간 격리된 통신 환경 제공
networks:
  family-tree-network:
    # Bridge 드라이버 - 기본 Docker 네트워크 타입
    # 컨테이너간 통신 가능하면서 호스트와 격리된 환경 제공
    # Spring Boot 애플리케이션에서 서비스명(mysql)으로 접근 가능
    driver: bridge
